#!/usr/bin/env node
const fs = require('fs');
const program = require('commander');
const download = require('download-git-repo');
const inquirer = require('inquirer');
const ora = require('ora');
const chalk = require('chalk');
const symbols = require('log-symbols');

program.version('1.0.0', '-v, --version')
    .command('webpack <name>')
    .action((name) => {
        console.log('----------start---------')
        if (!fs.existsSync(name)) {
            inquirer.prompt([
                {
                    name: 'description',
                    message: '请输入项目描述'
                },
                {
                    name: 'author',
                    message: '请输入作者名称'
                }
            ]).then((answers) => {
                const spinner = ora('正在下载模板...');
                spinner.start();
                const home = process.cwd();
                download('swraper/react_es6_dome', `${home}/${name}`, (err) => {
                    if (err) {
                        spinner.fail();
                        console.log(symbols.error, chalk.red(err),err);
                    } else {
                        spinner.succeed();
                        const fileName = `${name}/package.json`;
                        const meta = {
                            name,
                            description: answers.description,
                            author: answers.author
                        }
                        if (fs.existsSync(fileName)) {
                            const content = JSON.parse(fs.readFileSync(fileName).toString());
                            content.name = name;
                            content.description = answers.description || 'a project for react es6 dome';
                            content.author = answers.author;

                            fs.writeFileSync(fileName, JSON.stringify(content, null, 4),'utf8');
                        }
                        console.log(symbols.success, chalk.green('项目初始化完成'));
                    }
                })
            })
        } else {
            // 错误提示项目已存在，避免覆盖原有项目
            console.log(symbols.error, chalk.red('项目已存在'));
        }
    })
program.parse(process.argv);
